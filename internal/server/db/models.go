// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type AccountType string

const (
	AccountTypeOauth       AccountType = "oauth"
	AccountTypeEmail       AccountType = "email"
	AccountTypeCredentials AccountType = "credentials"
)

func (e *AccountType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountType(s)
	case string:
		*e = AccountType(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountType: %T", src)
	}
	return nil
}

type NullAccountType struct {
	AccountType AccountType
	Valid       bool // Valid is true if AccountType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountType) Scan(value interface{}) error {
	if value == nil {
		ns.AccountType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountType), nil
}

type Account struct {
	ID                pgtype.UUID
	UserID            pgtype.UUID
	Type              AccountType
	Provider          string
	ProviderAccountID string
	AccessToken       pgtype.Text
	RefreshToken      pgtype.Text
	ExpiresAt         pgtype.Int4
	TokenType         pgtype.Text
	IDToken           pgtype.Text
	SessionState      pgtype.Text
	Scope             pgtype.Text
	CreatedAt         pgtype.Timestamp
	UpdatedAt         pgtype.Timestamp
}

type Session struct {
	ID           pgtype.UUID
	SessionToken string
	RefreshToken string
	ExpiresAt    pgtype.Timestamp
	UserID       pgtype.UUID
	CreatedAt    pgtype.Timestamp
	UpdatedAt    pgtype.Timestamp
}

type User struct {
	ID            pgtype.UUID
	Name          pgtype.Text
	Email         string
	Image         string
	EmailVerified pgtype.Timestamp
	CreatedAt     pgtype.Timestamp
	UpdatedAt     pgtype.Timestamp
}

type VerificationToken struct {
	Identifier string
	Token      string
	ExpiresAt  pgtype.Timestamp
}
